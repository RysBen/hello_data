import pandas as pd
import numpy as np
from sklearn.linear_model import BayesianRidge, ElasticNet                 #
from sklearn.svm import SVR                                                #
#from xgboost import XGBRegressor                                           #
from sklearn.ensemble.gradient_boosting import GradientBoostingRegressor   #
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import explained_variance_score, mean_absolute_error, mean_squared_error, r2_score
import matplotlib.pyplot as plt

df=pd.read_csv('p_n.final.csv',header=0,index_col=0)
df2=df.drop('total',axis=1).transpose()
df2.index=pd.to_datetime(df2.index)
raw_data=df2
#merge with cost data 
#raw_data=np.loadtxt('reg.txt')
X_raw, y=raw_data.iloc[:,:-1], raw_data.iloc[:,-1]
model_ss=StandardScaler()
X=model_ss.fit_transform(X_raw)

num=int(X.shape[0]*0.7)
X_train, X_test=X[:num,:],X[num:,:]
y_train, y_test=y[:num],y[num:]

n_folds=4
#model_names=['BayesianRidge','XGBR','ElasticNet','SVR','GBR']
model_names=['BayesianRidge','ElasticNet','SVR','GBR']
model_br=BayesianRidge()
#model_xgbr=XGBRegressor(random_state=0)
model_etc=ElasticNet(random_state=0)
model_svr=SVR()
model_gbr=GradientBoostingRegressor(random_state=0)
#model_list=["model_br","model_xgbr","model_etc","model_svr","model_gbr"]
model_list=[model_br,model_etc,model_svr,model_gbr]
pre_y_list=[model.fit(X_train,y_train).predict(X_test) for model in model_list]

n_samples, n_features=X.shape
model_metrics_functions=[explained_variance_score,mean_absolute_error,mean_squared_error,r2_score]
model_metrics_list=[[m(y_test,pre_y_list[i]) for m in model_metrics_functions] for i in range(len(model_list))]
regresstion_score=pd.DataFrame(model_metrics_list, index=model_names,columns=['expained_variance','mae','mse','r2'])
print 'all samples: %d \t features: %d' %(n_samples,n_features), '\n','-'*60
print regresstion_score

plt.figure(figsize-(10,10))
for i,pre_y in enumerate(pre_y_list):
    plt.subplot(len(pre_y_list)+1,1,i+1)
    plt.plot(np.arange(len(y_test)),y_test,color='k',label='true y')
    plt.plot(np.arange(len(y_test)),pre_y_list[i],'g--',label=model_names[i])
    plt.title('True and {} result comparison'.format(model_names[i]))
    plt.legend(loc='upper right')
    plt.tight_layout()
    
# awk 'NR==1{$1="tf"} NR>1{$1="T"}1' file
# awk '{ if($1>$3) $6=$1; else $6=1-$1; print $0; } ' test01 > test02 
# awk 'NR==1{$1="tf"} NR>1{if($4=="55242465") $1="T"; else $1="F"}1' file
